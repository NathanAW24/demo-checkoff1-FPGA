/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_tester_1 (
    input clk,
    input rst,
    input [1:0] button,
    input [15:0] dip_switch,
    input [5:0] alufn_sig,
    input [0:0] inv,
    output reg [15:0] out,
    output reg [15:0] segment_display
  );
  
  
  
  reg [15:0] M_a_register_d, M_a_register_q = 1'h0;
  
  reg [15:0] M_b_register_d, M_b_register_q = 1'h0;
  
  reg [5:0] M_alufn_register_d, M_alufn_register_q = 1'h0;
  
  reg [0:0] M_inv_register_d, M_inv_register_q = 1'h0;
  
  reg [15:0] M_result_register_d, M_result_register_q = 1'h0;
  
  reg [15:0] M_segs_register_d, M_segs_register_q = 1'h0;
  
  
  localparam WAITA_control = 2'd0;
  localparam WAITB_control = 2'd1;
  localparam GETRESULT_control = 2'd2;
  
  reg [1:0] M_control_d, M_control_q = WAITA_control;
  
  reg [3:0] z;
  
  reg [3:0] v;
  
  reg [3:0] n;
  
  wire [16-1:0] M_alu_unit_out;
  wire [3-1:0] M_alu_unit_zvn;
  reg [16-1:0] M_alu_unit_a;
  reg [16-1:0] M_alu_unit_b;
  reg [1-1:0] M_alu_unit_inv;
  reg [6-1:0] M_alu_unit_alufn_signal;
  alu_6 alu_unit (
    .a(M_alu_unit_a),
    .b(M_alu_unit_b),
    .inv(M_alu_unit_inv),
    .alufn_signal(M_alu_unit_alufn_signal),
    .out(M_alu_unit_out),
    .zvn(M_alu_unit_zvn)
  );
  
  always @* begin
    M_control_d = M_control_q;
    M_segs_register_d = M_segs_register_q;
    M_result_register_d = M_result_register_q;
    M_a_register_d = M_a_register_q;
    M_inv_register_d = M_inv_register_q;
    M_b_register_d = M_b_register_q;
    M_alufn_register_d = M_alufn_register_q;
    
    z = 4'h0;
    v = 4'h0;
    n = 4'h0;
    M_alu_unit_a = M_a_register_q;
    M_alu_unit_b = M_b_register_q;
    M_alu_unit_alufn_signal = M_alufn_register_q;
    M_alu_unit_inv = M_inv_register_q;
    
    case (M_control_q)
      WAITA_control: begin
        M_result_register_d = dip_switch;
        M_segs_register_d = 16'hfff0;
        if (button[1+0-:1]) begin
          M_a_register_d = dip_switch;
          M_control_d = WAITB_control;
        end else begin
          M_control_d = WAITA_control;
        end
      end
      WAITB_control: begin
        M_segs_register_d = 16'hfff1;
        if (button[1+0-:1]) begin
          M_alufn_register_d = alufn_sig;
          M_b_register_d = dip_switch;
          M_control_d = GETRESULT_control;
          M_inv_register_d = inv;
        end else begin
          M_control_d = WAITB_control;
        end
      end
      GETRESULT_control: begin
        M_result_register_d = M_alu_unit_out;
        z[0+0-:1] = M_alu_unit_zvn[2+0-:1];
        v[0+0-:1] = M_alu_unit_zvn[1+0-:1];
        n[0+0-:1] = M_alu_unit_zvn[0+0-:1];
        M_segs_register_d = {z, v, n, 4'h8};
        if (button[1+0-:1]) begin
          M_a_register_d = 1'h0;
          M_b_register_d = 1'h0;
          M_result_register_d = 1'h0;
          M_control_d = 1'h0;
          M_control_d = WAITA_control;
        end else begin
          M_control_d = GETRESULT_control;
        end
      end
    endcase
    if (button[0+0-:1]) begin
      M_a_register_d = 1'h0;
      M_b_register_d = 1'h0;
      M_alufn_register_d = 1'h0;
      M_result_register_d = 1'h0;
      M_control_d = WAITA_control;
    end
    out = M_result_register_q;
    segment_display = M_segs_register_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_b_register_q <= 1'h0;
    end else begin
      M_b_register_q <= M_b_register_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_inv_register_q <= 1'h0;
    end else begin
      M_inv_register_q <= M_inv_register_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_segs_register_q <= 1'h0;
    end else begin
      M_segs_register_q <= M_segs_register_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_control_q <= 1'h0;
    end else begin
      M_control_q <= M_control_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_alufn_register_q <= 1'h0;
    end else begin
      M_alufn_register_q <= M_alufn_register_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_register_q <= 1'h0;
    end else begin
      M_a_register_q <= M_a_register_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_result_register_q <= 1'h0;
    end else begin
      M_result_register_q <= M_result_register_d;
    end
  end
  
endmodule
