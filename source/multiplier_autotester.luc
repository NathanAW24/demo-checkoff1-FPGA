module multiplier_autotester (
    input clk,  // clock
    input rst,  // reset
    input button_next_test_case[1], // down btn press 
    input button_speed_through[1], // up button press 
    input button_reset[1],
    input inv[1],
    output current_test_case[5],
    output current_statusPF[2],
    output out[16]
  ) {
  .clk(clk), .rst(rst) {// LUCAS ADD
    custom_counter ctr (#DIV(27), #SIZE(5), #TOP(16)); 
  }
  
  // register to store the current test case number 
  dff current_test_case_register[5](#INIT(b00000),.clk(clk) , .rst(rst));
  
  // register to store the current out value in each test cse 
  dff reg_current_out[16](.clk(clk) , .rst(rst)); // ADDED BY ANSAR TO FIX OUTPUT ON 7 SEGMENT
  
  //register tot store current test status 
  dff reg_current_statusPF[2](#INIT(b00),.clk(clk) , .rst(rst));
  
  // register to set the tester on speed through tests all
  // test cases at once no waiting for button 
  dff speed_through[1](#INIT(b0), .clk(clk) , .rst(rst));
  
  // Declare the fsm states
  fsm state (.clk(clk), .rst(rst)) = {IDLE, TESTING, PASS};
  fsm track_failure (.clk(clk), .rst(rst)) = {NULL, FAIL_BEFORE};
  // dff track_failure[1] (.clk(clk), .rst(rst));
  
  //import alu
  alu alu_unit; 
  
  const TEST_CASE_ROM = {     

    //test case 15: 2*0xFFF8 = 2*-8 = -16 pos*neg no overflow
    56h020F00F0F01000,
    

    //test case 14: 2*0xFFF8 = 2*-8 = -16 pos*neg no overflow
    56h020002FFF8FFF0,
    

    //test case 13: 0xFF00 * 0xF0F0 = -256*-3856= 987136 dec
    56h02FF00F0F01000,
    

    //test case 12: 0xFFFE*0xFFFC = -2*-8 = 16 neg*neg no overflow
    56h02FFFEFFF80010,
    

    //test case 11: h0F00 * h00F0 = 921600 dec (hE1000)
    56h020F0000F01000,
    

    //test case 10: 2*8 = 16 pos*pos no overflow
    56h02000200080010,
    
    //test case 9: -1*0xF000
    56h02FFFFF0001000,
    
    //test case 8: 1*0xF000
    56h020001F000F000,
    
    //test case 7: 0 x 0xF000
    56h020000FFFF0000,
    
    //test case 6: -1 * 0x00FF
    56h02FFFF00FFFF01,
    
    //test case 5: 1 * 0x00FF
    56h02000100FF00FF,
    
    //test case 4: 0 * 0x00FF
    56h02000000FF0000,
    
    //test case 3: -1 * -1 (neg * neg)
    56h02FFFFFFFF0001,
    
    //test case 2: 1 * 1
    56h02000100010001,       
    
    //test case 1: test 0 == 0  a=b
    56h02000000000000,
    
    //test case 0: 
    56h00000000000000 
         
    }; 
  always {
    // Declare initial values
    //current_test_case = 5b0; removed log 1
    alu_unit.a = 16b0;
    alu_unit.b = 16b0;
    alu_unit.inv = inv ; 
    alu_unit.alufn_signal = 6b0; // default adder 
    state.d = state.IDLE;
    ctr.manual_reset = button_speed_through; // LUCAS ADD
    // ADDED BY ANSAR TO FIX RESET BUTTON
    
     if(button_speed_through){
       speed_through.d = b1; 
       // Reset all values // LUCAS ADD
       current_test_case_register.d = 5b0; // ADDED BY ANSAR TO FIX RESET BUTTON
       reg_current_out.d = 16b0;// change output register back to 0
       reg_current_statusPF.d = 2b00; // register status to 0
       ctr.manual_reset = button_speed_through;

      }
    
    case(state.q){
      state.IDLE:
      
        if(speed_through.q){
          if( current_test_case_register.q < b10000){
            state.d = state.TESTING; 
            current_test_case_register.d = current_test_case_register.q + b00001;
          }
        }

        if(button_next_test_case){
          if( current_test_case_register.q < b10000){
            state.d = state.TESTING; 
            current_test_case_register.d = current_test_case_register.q + b00001;
          }
        }
        
        if(button_reset){ // ADDED BY ANSAR TO FIX RESET BUTTON
          state.d = state.IDLE; // ADDED BY ANSAR TO FIX RESET BUTTON
          current_test_case_register.d = 5b0; // ADDED BY ANSAR TO FIX RESET BUTTON
          reg_current_out.d = 16b0;// change output register back to 0
          reg_current_statusPF.d = 2b00; // register status to 0
          speed_through.d = b0;
          ctr.manual_reset = b1; // LUCAS ADD
        }
        
      state.TESTING:
        case(current_test_case_register.q){
          current_test_case_register.q: 
            if(current_test_case_register.q == b10000 ){
              state.d = state.PASS ;
            }else{
            
              alu_unit.a = TEST_CASE_ROM[current_test_case_register.q][47:32];
              alu_unit.b = TEST_CASE_ROM[current_test_case_register.q][31:16];
              alu_unit.alufn_signal = TEST_CASE_ROM[current_test_case_register.q][53:48];
              
              reg_current_statusPF.d = b01;
              current_test_case = current_test_case_register.q;
              reg_current_out.d = alu_unit.out; 
              
              if (alu_unit.out != TEST_CASE_ROM[current_test_case_register.q][15:0]){
                track_failure.d = track_failure.FAIL_BEFORE;
                reg_current_statusPF.d = b10;
              }
              state.d =state.IDLE; 
            }
        }
      state.PASS:
        if(track_failure.q == track_failure.FAIL_BEFORE){
          reg_current_statusPF.d = b10 ;
          }else{
            reg_current_statusPF.d = b11;
          }
        if(button_reset){
            state.d = state.IDLE;
            current_test_case_register.d = 5b0; 
            reg_current_out.d = 16b0; 
            reg_current_statusPF.d = 2b00;
            speed_through.d = b0;
            ctr.manual_reset = b1; // LUCAS ADD

          }
      }
    
    // Increment the input terminal by 1 for speed_through module // LUCAS ADD
    if (speed_through.q) {
      if (current_test_case_register.q != b10000) {
        current_test_case_register.d = ctr.value;
      }
      else {
        state.d = state.PASS;
      }
    }
    
    //used to display on 7 seg display 
    out = reg_current_out.q ; // ADDED BY ANSAR TO FIX OUTPUT ON 7 SEGMENT
    current_test_case = current_test_case_register.q;
    current_statusPF = reg_current_statusPF.q;
  }
}