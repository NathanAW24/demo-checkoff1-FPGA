module adder_tester (
    input clk,  // clock
    input rst,  // reset
    input button_next_test_case[1], // down btn press 
    input button_speed_through[1], // up button press 
    input button_reset,
    input inv[1],
    output current_test_case[5],
    output current_statusPF[2],
    output out[16]
  ) {
  
  // register to store the current test case  number 
  dff current_test_case_register[5](.clk(clk) , .rst(rst));
  
  // register to set the tester on speed through tests all
  // test cases at once no waiting for button 
  dff speed_through[1](.clk(clk) , .rst(rst));
  
  // Declare the fsm states
  fsm state (.clk(clk), .rst(rst)) = {IDLE, TESTING, PASS};
  fsm track_failure (.clk(clk), .rst(rst)) = {NULL, FAIL_BEFORE};
  
  //import alu
  alu alu_unit; 
   
  always {
    // Declare initial values
    current_test_case = 5b0;
    alu_unit.a = 16b0;
    alu_unit.b = 16b0;
    alu_unit.inv = inv ; 
    alu_unit.alufn_signal = 6b0; // default adder 
    state.d = state.IDLE;
    current_statusPF = 0 ; 
    
    if(button_speed_through){
      speed_through.d = b1; 
      }
    
    case(state.q){
      state.IDLE:
        if(speed_through.q){
          state.d = state.TESTING; 
          current_test_case_register.d = current_test_case_register.q + 1;
        }
        if(button_next_test_case){
          state.d = state.TESTING; 
          current_test_case_register.d = current_test_case_register.q +1 ;
          }
        
      state.TESTING: 
        case(current_test_case_register.q){
          // ADD: 0 + 0
          b00001:
            alu_unit.a = 16h0000;
            alu_unit.b= 16h0000;
            alu_unit.alufn_signal = 6b0;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h0000){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE;  
            
          // ADD: pos + pos with overflow
          b00010:
            alu_unit.a = 16h8001;
            alu_unit.b= 16h8000;
            alu_unit.alufn_signal = 6b0;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h0001){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE;  
            
            
          // ADD: pos + pos with NO overflow
          b00011:
            alu_unit.a = 16h0001;
            alu_unit.b= 16h0001;
            alu_unit.alufn_signal = 6b0;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h0002){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE; 
            
            
            
          // ADD: pos + neg with overflow
          b00100:
            alu_unit.a = 16h0004;
            alu_unit.b= 16hFFFF;
            alu_unit.alufn_signal = 6b0;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h0003){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE; 
            
          // ADD: pos + neg with NO overflow
          b00101:
            alu_unit.a = 16h0001;
            alu_unit.b= 16hF000;
            alu_unit.alufn_signal = 6b0;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16hF001){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE; 
            
            
          // SUB: 0 - 0
          b00110:
            alu_unit.a = 16h0000;
            alu_unit.b= 16h0000;
            alu_unit.alufn_signal = 6b000001;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h0000){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE; 
            
            
            
            
          // SUB: pos - pos with NO overflow
          b00111:
            alu_unit.a = 16h0002;
            alu_unit.b= 16h0001;
            alu_unit.alufn_signal = 6b000001;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h0001){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE;    
            
            
          // SUB: pos - neg with overflow
          b01000:
            alu_unit.a = 16h7FFF;
            alu_unit.b= 16h8001;
            alu_unit.alufn_signal = 6b000001;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16hFFFE){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE;       
            
            
            
          // SUB: pos - neg with overflow
          b01001:
            alu_unit.a = 16h0001;
            alu_unit.b= 16hFFFF;
            alu_unit.alufn_signal = 6b000001;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h0002){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE;        
            
          // SUB: neg - pos with overflow
          b01010:
            alu_unit.a = 16h8000;
            alu_unit.b= 16h0001;
            alu_unit.alufn_signal = 6b000001;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h7FFF){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE;      
            
            
            
          // SUB: neg - pos with NO overflow
          b01011:
            alu_unit.a = 16hFFFF;
            alu_unit.b= 16h0001;
            alu_unit.alufn_signal = 6b000001;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16hFFFE){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE;      
            
            
            
          // SUB: neg - pos with NO overflow
          b01100:
            alu_unit.a = 16hFFFF;
            alu_unit.b= 16hFFFF;
            alu_unit.alufn_signal = 6b000001;
            current_test_case = current_test_case_register.q;
                    
            if (alu_unit.out != 16h0000){
              track_failure.d = track_failure.FAIL_BEFORE;
              current_statusPF = 2;
  
            }
            state.d =state.IDLE; 
            
            
          // ***********************************************
          // TEST PASSED! After everything above run alr
          b01101:
            state.d = state.PASS;
            

            
            
            
        }
      state.PASS:
        if(track_failure.q == track_failure.FAIL_BEFORE){
          current_statusPF = 2 ;
          }else{
            current_statusPF = 1;
          }
        if(button_reset){
          state.d = state.IDLE;
        }
        
      }
        
    
    out = alu_unit.out ; 
   
  }
}