module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  alu_manual_tester manual(.clk(clk), .rst(rst)); // Manual Testing for ALU
  auto_tester auto(.clk(clk), .rst(rst)); // Auto Testing for ALU
  
  multi_seven_seg seg(.clk(clk), .rst(rst));  // seven seg
  
 
  // 0 : up 1: middle 2: down 3: left 4: right 
  button_conditioner buttoncond[5](.clk(clk));
  edge_detector buttondetector[5](#RISE(1), #FALL(0), .clk(clk));
  
  // dff to store the value of the mode dip switch 
  dff auto_mode_register(#INIT(b0), .clk(clk) , .rst(rst)); 
  
  
  // fsm to switch between testing modes 
  fsm mode(.clk(clk), .rst(rst)) = {MANUAL, AUTO};
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    io_seg = ~seg.seg;      // connect segments to the driver
    io_sel = ~seg.sel;      // connect digit select to the driver
    
    // connecting indicator for inv
    io_led[2][6] = io_dip[2][6];
        
    //connecting the auto_mode_register
    auto_mode_register.d = io_dip[2][7];
    io_led[2][7] = io_dip[2][7];
    
    //setting innitial values to zero 
    seg.values = {b1111, b1111, b1111, b1111};
     
    // Initialise buttons
    // 0: up , 1: middle , 2: down , 3: left , 4: right 
    buttoncond.in = io_button[4:0]; 
    buttondetector.in = buttoncond.out;
    
    // Manual Mode Inputs
    manual.button = buttondetector.out[2:1]; // Down button to toggle between 
    manual.inv = io_dip[2][6]; // dip switch to turn on invertion of bit (used for testing the testor unit )
    manual.dip[7:0] = io_dip[0]; // First 8 bits of input of rightmost io_dip
    manual.dip[15:8] = io_dip[1]; // Second 8 bits of input in middle io_dip
    manual.dip[21:16] = io_dip[2][5:0]; // 6 bits of ALUFN from buttons 8 to 3 of leftmost io_dip
    
    //Auto mode Inputs 
    auto.button = buttondetector.out; 
    auto.inv = io_dip[2][6];
    
    case (mode.q) {
      mode.MANUAL: 
        seg.values = manual.out_segs;
        io_led[2][2:0] = manual.out_zvn; 
        io_led[0] = manual.out[7:0];
        io_led[1] = manual.out[15:8];
        
        // if hte left most dip switch is down go to manual mode
        auto_mode_register.d = io_dip[2][7];
        if (auto_mode_register.q == b1) { 
          mode.d = mode.AUTO;
        }
    // 0: idle
    // 1: adder
    // 2: comparator
    // 3: boolean
    // 4: shifter
    // 5: multiplier
    // 6: error
      mode.AUTO:  
        if(auto.out_current_alu_function == 0){
          io_led[1][7:3] = auto.out_current_alu_function;
          io_led[1][1:0] = b00;
        }else{
          io_led[0][4:0] = auto.out_current_test_case;
          io_led[1][1:0] = auto.out_test_statusPF;
          seg.values = {auto.out[15:12], auto.out[11:8],auto.out[7:4],auto.out[3:0]};
          case(auto.out_current_alu_function) {
            1: 
              io_led[1][7] = b1;  // ADD
            2: 
              io_led[1][6] = b1;  // COMPARATOR
            3: 
              io_led[1][5] = b1;  // BOOLEAN
            4: 
              io_led[1][4] = b1;  // SHIFTER
            5: 
              io_led[1][3] = b1;  // MULTIPLIER
            

          }
        if(auto_mode_register.q == b0){
          mode.d = mode.MANUAL;
          }  
    } 
  }
}