module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  //manual test unit 
  alu_tester manual(.clk(clk), . rst(rst)); 
  auto_tester auto(.clk(clk), . rst(rst));
  // dff to store the toggle value 
  dff toggle_mode_auto[1](.clk(clk), .rst(rst));
  fsm tester(.clk(clk), .rst(rst)) = {MANUAL, AUTO};  // fsm to toggle between manual and auto tester
  
  button_conditioner buttoncond[5](.clk(clk));
  edge_detector buttondetector[5](#RISE(1), #FALL(0), .clk(clk)); //ensure  taht a button input is synchornised with the clock 
  
  multi_seven_seg segset(.clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
  
    
    //setting up the button_conditioner (ensure input is synchronised with clk and )
    buttoncond.in = io_button; // 0: up, 1: middle, 2: down, 3: left, 4: right
    buttondetector.in = buttoncond.out; 
    
    //led to show mode auto: 1 / manual : 0 
    io_led[2][7] = io_dip[2][7];
    toggle_mode_auto.d = io_dip[2][7] ;
    
    // if inv is on light up the left most 
    io_led[2][6] = io_dip[0][6];
     
    //setting intial segements values
    segset.values = {4d15, 4d15, 4d15, 4d15};
    
    //connection for the manual entry to alu  
    manual.button = buttondetector.out[2:1];
    manual.inv = io_dip[2][6]; // use left most dip seitch to input the inv singal
    manual.alufn_sig = io_dip[0][5:0];
    manual.dip_switch[15:8] = io_dip[1];
    manual.dip_switch[7:0] = io_dip[0]; 

    segset.values = manual.segment_display;
    io_seg = ~segset.seg; //why ? 
    io_sel = ~segset.sel;
    
    case(tester.q){
      tester.MANUAL:
        //output from manual entry to alu 
        io_led[0] = manual.out[7:0];
        io_led[1] = manual.out[15:8];
        segset.values = manual.segment_display;
        // toggle to auto 
        if(toggle_mode_auto.q == b1){
          tester.d = tester.AUTO; 
         }
        
        io_seg = ~segset.seg;
        io_sel = ~segset.sel;
      tester.AUTO:
        //TODO: output for auto tester 
        io_led[0] = auto.out[7:0];
        io_led[1] = auto.out[15:8];
        io_led[2][4:0] = auto.out_current_test_case ;
        //toggle to auto 
         if(toggle_mode_auto.q == b0){
            tester.d = tester.MANUAL;
          }
        io_seg = ~segset.seg;
        io_sel = ~segset.sel;
     
      }
  }
}