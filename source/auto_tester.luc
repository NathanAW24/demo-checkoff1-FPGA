module auto_tester (
    input clk,  // clock
    input rst,  // reset
    input button[5],
    input inv[1], 
    output out[16],
    //refer to documentation for each alu test case enumeration 
    output out_current_test_case[5],
    output out_current_alu_function[3],
    // 0: idle
    // 1: adder
    // 2: comparator
    // 3: boolean
    // 4: shifter
    // 5: multiplier
    // 6: error
    output out_test_statusPF[2]
    // 0: not done
    // 1: pass
    // 2: fail
  ) {
  
  // TODO : load up all the various tester modules 
  adder_tester test_adder(.clk(clk), .rst(rst));
  // compare_tester test_compare(.clk(clk), .rst(rst));
  boolean_tester test_boolean(.clk(clk), .rst(rst));
  shifter_tester test_shifter(.clk(clk), .rst(rst));
  multiply_tester test_multiply(.clk(clk), .rst(rst));  
  
  // fsm to shift through different alu functions test 
  fsm tester_function_state(.clk(clk), .rst(rst)) = {IDLE, ADDER, COMPARATOR, BOOLEAN, SHIFTER, MULTIPLIER, ERROR};
  
  always {
    test_adder. = 0;
    test_adder.inv = inv;
    test_adder.button_reset = button[3];
    //test_compare.start = 0;
    //test_compare.inv = inv;
    //test_compare.reset_button = button[3];
    test_boolean.inv = inv;
    test_boolean.button_reset = button[3];
    test_shifter.inv = inv;
    test_shifter.button_reset = button[3];
    test_multiply.inv = inv;
    test_multiply.button_reset = button[3];

    out_test_statusPF = 2b00;
    //out_state = state.q;
    //out_led = 16b0;

    // FSM for auto testing
    case(tester_function_state.q) {
      tester_function_state.IDLE:
        out_test_statusPF = 2b00;
        if (button[0]) {  // pressed left
          tester_function_state.d = tester_function_state.MULTIPLIER;
        }
        else if (button[1]) {  // pressed right
          tester_function_state.d = tester_function_state.q + 1;
        }
        
      tester_function_state.ADDER:
        test_adder.inv = inv;
        out_test_statusPF = test_adder.current_statusPF;
        out = test_adder.out;
        if (button[0]) {  // pressed left
          tester_function_state.d = tester_function_state.q - 1;
        }
        else if (button[1]) {  // pressed right
          tester_function_state.d = tester_function_state.q + 1;
        }
        
      // tester_function_state.COMPARATOR:
      
      // test_adder.inv = inv;
      // out = test_compare.out;
      // out_test_statusPF = test_compare.current_statusPF;
      //
      // if (button[0]) {  // pressed left
      //   tester_function_state.d = tester_function_state.q - 1;
      //}
      //else if (button[1]) {  // pressed right
      //   state.d = state.q + 1;
      //}
        
      tester_function_state.BOOLEAN:
        test_boolean.inv = inv;
        out_test_statusPF = test_boolean.current_statusPF;
        out = test_boolean.out;
        if (button[0]) {  // pressed left
          tester_function_state.d = tester_function_state.q - 1;
        }
        else if (button[1]) {  // pressed right
          tester_function_state.d = tester_function_state.q + 1;
        }
        
      tester_function_state.SHIFTER:
        test_shifter.inv = inv;
        out_test_statusPF = test_shifter.current_statusPF;
        out = test_shifter.out;
        if (button[0]) {  // pressed left
          tester_function_state.d = tester_function_state.q - 1;
        }
        else if (button[1]) {  // pressed right
          tester_function_state.d = tester_function_state.q + 1;
        }
        
      tester_function_state.MULTIPLIER:
        test_multiply.inv = inv;
        out_test_statusPF = test_multiply.current_statusPF;
        out = test_multiply.out;
        if (button[0]) {  // pressed left
          tester_function_state.d = tester_function_state.q - 1;
        }
        else if (button[1]) {  // pressed right
          tester_function_state.d = tester_function_state.IDLE;
        }
        
    }
 
    if (button[2]) {  // pressed middle, go back to idle
      tester_function_state.d = tester_function_state.IDLE;
    }
  }
}
